import paramiko
from aiogram import Router, F
from aiogram.types import Message
from dotenv import load_dotenv
import asyncio
import os

load_dotenv()
router_ssh = Router()

def run_ssh_command(command: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH-–∫–æ–º–∞–Ω–¥."""
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        ssh.connect(
            hostname=os.getenv('host'),
            username=os.getenv('user_name'),
            password=os.getenv('password_host'),
            #key_filename=os.getenv('key_filename')#–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ssh_key
        )

        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode().strip()
        error = stderr.read().decode().strip()
        return output if output else error or "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"
    finally:
        ssh.close()


@router_ssh.message(F.text == '–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É')
async def handle_create_folder(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH."""
    command = "mkdir -p /root/my_new_folder"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
    result = await asyncio.to_thread(run_ssh_command, command)
    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")


@router_ssh.message(F.text.startswith("/cmd "))
async def handle_custom_command(message: Message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ /cmd."""
    user_command = message.text.split("/cmd ")[1]
    if not user_command:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: /cmd ls /")
        return

    result = await asyncio.to_thread(run_ssh_command, user_command)
    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Ö—ç–Ω–¥–ª–µ—Ä–∞—Ö
@router_ssh.message(F.text)
async def message(message: Message):
    await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã linux, –Ω–∞–ø—Ä–∏–º–µ—Ä:  /cmd ls / ")


@router_ssh.message(~F.text)
async def handle_non_text(message: Message):
    if message.photo:
        await message.answer("üì∑ –§–æ—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã linux, –Ω–∞–ø—Ä–∏–º–µ—Ä:  /cmd ls /")
    elif message.voice:
        await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã linux, –Ω–∞–ø—Ä–∏–º–µ—Ä:  /cmd ls /")
    elif message.sticker:
        await message.answer("üò∫ –°—Ç–∏–∫–µ—Ä—ã –º–∏–ª—ã–µ, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã linux, –Ω–∞–ø—Ä–∏–º–µ—Ä:  /cmd ls /")
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã linux, –Ω–∞–ø—Ä–∏–º–µ—Ä:  /cmd ls /")